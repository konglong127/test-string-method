#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include "./str.h"
#include "./Assert.cpp"
using namespace std;

void test() {
	using namespace AssertSpace;
	
	myString s(10, (char*)"1234567890");
	myString s1(10, (char*)"abcdefghij");
	myString s2(6, (char*)"asdsad");

	//?
	Assert<myString,string> *ast=Assert<myString,string>::init();
	ast->describe("?????????????")
		->MixTypeValidate("????s?????",s, "1234567890")
		->MixTypeValidate("????s1?????", s1, "abcdefghij")
		->MixTypeValidate("????s2?????", s2, "asdsad")
		->summary();

	//??
	Assert<int, int>* ast1 = Assert<int, int>::init();
	ast1->describe("?????????")
		->SameTypeValidate("???????s????",s.length(), 11)
		->SameTypeValidate("???????s1????", s1.length(), 11)
		->SameTypeValidate("???????s2????", s2.length(), 7)
		->summary();
	
	//??
	s = s1;
	ast->describe("????????????????")->MixTypeValidate("????s=s1", s, "abcdefghij")->summary();
	//??
	ast1->describe("?????????")->SameTypeValidate("???????s????", s.length(), 11)->summary();

	//??
	s += s1;
	ast->describe("????????????????")->MixTypeValidate("????s+=s1", s, "abcdefghijabcdefghij")->summary();
	//??
	ast1->describe("?????????")->SameTypeValidate("???????s????", s.length(), 21)->summary();


	//??
	s =s+s1;
	ast->describe("????????????????")->MixTypeValidate("????s+=s1", s, "abcdefghijabcdefghijabcdefghij")->summary();
	//??
	ast1->describe("?????????")->SameTypeValidate("???????s????", s.length(), 31)->summary();

	//??
	s = s1 + s2;
	ast->describe("????????????????")->MixTypeValidate("????s=s1+s2", s, "abcdefghijasdsad")->summary();
	//?
	ast1->describe("?????????")->SameTypeValidate("???????s????", s.length(), 17)->summary();
	
	s2 = s;
	//??
	ast->describe("????????????????")->SameTypeValidate("????s2=s", s2, s)->summary();
	//???
	ast1->describe("?????????")->SameTypeValidate("???????s2????", s2.length(), s.length())->summary();

	s = "abcdefg";
	s2 = "abcdefg";
	s = s + s2;
	s = s + "123";
	//???
	ast->describe("????????????????")->MixTypeValidate("????s+=s1;s+=s2", s, "abcdefgabcdefg123")->summary();
	//???
	ast1->describe("?????????")->SameTypeValidate("???????s????", s.length(), 18)->summary();
	
	//???
	Assert<bool, bool>* ast2 = Assert<bool, bool>::init();
	s = "abc";
	s1 = s;
	s2 = "abcd";
	ast2->describe("???????????§³????")
		->SameTypeValidate("????s>=s1", (s >= s1), true)
		->SameTypeValidate("????s<s2", (s < s2), true)
		->SameTypeValidate("????s1>s", (s1 > s), false)
		->SameTypeValidate("????s1==s", (s1 == s), true)
		->summary();


	//system("cls");
	ast->destroy();
}

int main() {
	test();
	system("pause");
	return 0;
}